// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Car {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  images           String[]
  modelYear        Int
  modelMake        String
  price            Float
  condition        Condition @default(USED)
  transmission     Transmission @default(AUTO)
  mileage          Int
  engineType       EngineType @default(PETROL)
  engineCapacity   Float
  color            String?
  doors            Int?
  warranty         Boolean?  @default(false)
  lastServiced     DateTime?
  location         String?
  description      String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}


enum Condition {
  NEW 
  USED
}

enum Transmission {
  AUTO
  MANUAL
  SEMI_AUTO
  CVT
}

enum EngineType {
  PETROL
  DIESEL
  ELECTRIC
  HYBRID  
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  role          UserRole @default(USER)
  // Optional for WebAuthn support
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  USER
  ADMIN
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}